# backend / schemas.py

from pydantic import BaseModel
from datetime import date

# This is the base schema. It contains all the fields
# that are common for both creating and reading a transaction.
# These are the fields we expect to find in the CSV.

class TransactionBase(BaseModel):
    merchant_name: str
    amount: float
    date: date
    transaction_id: str

# This schema is used specifically when creating a new transaction.
# For now, it's identical to the base, but this structure
# allows us to easily add creation-specific fields later.

class TransactionCreate(TransactionBase):
    pass

# This schema is used when reading data from the database.
# It includes the fields that are generated by the database,
# like 'id' and the default 'category'.

class Transaction(TransactionBase):
    id: int
    category: str

    # This Config class tells Pydantic to read the data
    # even if it is not a dict, but an ORM model (like our SQLAlchemy Transaction model).

    class Config:
        from_attributes = True


# Schema for updating a transaction category
class TransactionUpdate(BaseModel):
    category: str

# Schema for the incoming chat question
class ChatRequest(BaseModel):
    question: str

# Schema for the outgoing chat response
class ChatResponse(BaseModel):
    response: str

class BudgetUpdate(BaseModel):
    amount: float

    # Schema for manually creating a transaction (no transaction_id needed)
class TransactionManualCreate(BaseModel):
    merchant_name: str
    amount: float
    date: date
    category: str # Category is required for manual entry